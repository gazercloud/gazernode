// Code generated by go-bindata.
// sources:
// files/favicon.ico
// files/mainicon64.png
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xdd\xbf\x6e\x13\x59\x14\xc7\xf1\x33\x52\xa4\xdd\x34\x91\x4b\x47\x14\xb8\x00\x69\x24\x9a\x3c\x82\x85\xe8\xf3\x0a\xa9\x10\x4f\x90\x7a\xd2\x44\x94\x14\x3c\x00\x25\x4f\x80\x90\xd2\xf0\x24\x69\x78\x90\x8b\xcc\x0c\x68\xb0\x6c\xe2\x7f\xe3\xeb\xcb\x7c\xce\xee\xf5\x28\xb1\xe7\x9e\xdf\xf7\x7c\xed\xd9\xac\xd7\x1b\x22\xaa\xf8\x2f\x26\x93\xc5\x71\x16\xef\xce\x22\x6e\x23\x62\x3a\x6d\xbf\x7e\x7f\x1e\xf1\x78\x16\x31\x9b\xb5\x5f\x7f\x9e\x44\xbc\xbd\x88\xb8\xba\xea\xbe\x7e\x19\x71\xf1\x3c\x62\x3e\x6f\xbf\xae\x5f\x47\x7c\x79\x13\x71\x73\xd3\xdd\xff\x31\xe2\xf1\x3e\xa2\x69\xba\xfb\xff\xaf\xe2\xfe\x59\x15\x75\x44\x4c\x22\x62\x16\xed\xf7\x7f\xd6\x59\x0c\x52\xdf\x3f\x45\x5a\xb5\xdc\x7f\x9c\xfb\x73\xd7\x53\xf9\xae\x1f\x2e\xd3\xaa\xe5\xfc\xc3\x9c\xbf\x4f\xa5\x14\x71\x77\xb7\x7a\x2d\xee\x7b\xea\xfe\xc5\x75\x66\x1a\x11\x57\xfd\xeb\xcc\xf9\x21\x92\x6d\x5f\xeb\xe6\xb8\xed\xeb\xca\xe3\x3d\xde\xe3\x8f\xff\xf8\xd2\x6b\x5b\xde\x57\x5f\x6f\xd3\x26\xcb\xfe\xf6\xb7\xff\xf0\xfb\x0f\x59\x29\xa5\x68\xa6\xd5\x46\x6b\xf1\xd8\x6d\x1f\x5f\x77\xff\xae\x37\xef\xff\x1c\x36\x39\x06\xd9\xf6\xb5\xa9\xc7\x7d\xff\xb9\xe2\x7c\xe7\x3b\xdf\xf9\xce\x77\xfe\x29\x9d\x3f\xf6\xda\x77\x7e\xeb\xde\x0f\x7b\x6a\xe9\xaf\xbf\xfe\xfa\xeb\xaf\x7f\xce\xfe\x39\x2b\xa5\x94\x9a\x6a\xb7\xbf\x52\x57\xfb\x9c\x5f\x77\xff\xad\xe8\xa6\xff\x3e\xc5\x8b\xdc\x53\x19\xa6\x76\x7d\x9e\x6d\xfa\x3c\xb4\xbf\xfd\xed\x6f\x7f\xfb\xdb\xdf\xfe\xf6\xb7\xbf\xfd\xed\x6f\x7f\xfb\xdb\xdf\xfe\xf6\x57\x79\x6b\x68\xbf\xbb\xbe\x0f\x39\xf4\xfb\xa4\xf2\xcb\x2f\xbf\xfc\xf2\xcb\x2f\xbf\xfc\xf2\xcb\x2f\xbf\xfc\xf2\xcb\x2f\xff\xf1\xf2\x97\x5c\xed\x27\x8d\x22\x9a\xa8\x9a\xa8\xca\x39\xfe\xca\x5d\x7a\xfe\xba\xfb\x7f\xc9\x9a\xfe\xe7\xb4\xe6\xb9\x9f\x15\xa7\x59\x43\x5d\x27\x36\xbd\x8e\xe8\xaf\xbf\xfe\xfa\xeb\xaf\xbf\xfe\xfa\xeb\xaf\xbf\xfe\xfa\xeb\xaf\xbf\xfe\xfa\xeb\xaf\xbf\xfe\xfa\xeb\xaf\xbf\xfe\xfa\xeb\xaf\xbf\xfe\xfa\xeb\x7f\x98\xfe\x6a\xdc\x95\xfb\xf9\x37\xd4\xe7\x88\x72\x7f\x4e\x0a\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\x8f\xcd\x3f\xe6\xfa\xfd\x67\xc2\x44\x54\x63\x5a\x69\xa9\x72\xe7\xc9\xc5\x5f\x77\x7f\x96\xcf\xb7\xfe\xef\x89\xf8\x90\xfb\x59\xa9\x56\x55\xae\xeb\xf4\xa1\xae\xf3\xb9\x73\xc8\x9f\x3f\x8b\xfc\xe5\x2d\xf9\xe5\x97\x5f\x7e\xf9\xe5\x2f\x71\xc9\x2f\xbf\xfc\xf2\xcb\x2f\x7f\x89\x4b\x7e\xf9\xe5\x97\x5f\x7e\xf9\x4b\x5c\xf2\xcb\x2f\xbf\xfc\xf2\xcb\x5f\xe2\x92\x5f\x7e\xf9\xe5\x97\x5f\xfe\x12\x97\xfc\xf2\xcb\x2f\xbf\xfc\xf2\x97\xb8\xe4\x97\x5f\x7e\xf9\xe5\x97\xbf\xc4\x25\xbf\xfc\xf2\xcb\x2f\xbf\xfc\x25\x2e\xf9\xe5\x97\x5f\x7e\xf9\xe5\x2f\x71\xc9\x2f\xbf\xfc\xe5\xe7\x57\x6a\xcc\x95\xfb\x75\xb8\xef\xeb\x37\xd7\xef\x79\x2b\xfd\xf7\xe4\x99\xbf\xf9\x9b\xbf\xf9\xe7\x9e\xa3\xf9\xe7\x9f\xa5\xf9\x97\xb7\xcc\xdf\xfc\xcd\xdf\xfc\xcd\xdf\xfc\x4b\x5c\xe6\x6f\xfe\xe6\x6f\xfe\xe6\x6f\xfe\x25\x2e\xf3\x37\x7f\xf3\x37\x7f\xf3\x37\xff\x12\x97\xf9\x9b\xbf\xf9\x9b\xbf\xf9\x9b\x7f\x89\xcb\xfc\xcd\xdf\xfc\xcd\xdf\xfc\xcd\xbf\xc4\x65\xfe\xe6\x6f\xfe\xe6\x6f\xfe\xe6\x5f\xe2\x32\x7f\xf3\x37\x7f\xf3\x37\x7f\xf3\x2f\x71\x99\xbf\xf9\x9b\xbf\xf9\x9b\xbf\xf9\x97\xb8\xcc\xdf\xfc\xcd\xdf\xfc\xcd\x7f\xbf\xf9\xab\x7c\x95\x7a\xd5\x2c\xbe\x51\xb9\x75\xfb\xf7\xdb\xb4\xa6\x4e\x21\x9b\xdb\xd3\xbf\xed\x3f\x67\xea\x88\x68\xbf\xbb\xf8\x7b\x16\x6d\x55\xa1\xd4\x72\xe5\xfe\x79\x2b\xf7\xcf\x79\xb9\x73\xe0\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe7\xce\x81\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\x1f\x3f\x7e\xfc\xf8\xf1\xe3\xc7\x8f\xff\x4f\x7e\xa5\xd4\x78\x2b\xf7\x75\x28\xf7\xf5\xef\xfa\xe1\x32\x8d\x71\xf1\xcf\x3f\xff\xfc\xe7\xf6\xc0\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\x9f\xdb\x03\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\x3f\xff\xfc\xf3\xcf\xff\x3a\xff\x6a\xbc\x95\x96\xaa\x69\xbf\x5d\x39\x3a\x3a\xfe\x7b\xc7\xe5\xd7\xbb\xd7\xbf\xa3\xe3\x78\x8e\xcb\xaf\xf7\x1f\x01\x00\x00\xff\xff\x02\xcb\x80\x69\xae\x23\x02\x00")

func filesFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_filesFaviconIco,
		"files/favicon.ico",
	)
}

func filesFaviconIco() (*asset, error) {
	bytes, err := filesFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/favicon.ico", size: 140206, mode: os.FileMode(438), modTime: time.Unix(1590863145, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesMainicon64Png = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x70\x00\x61\x26\x66\x06\x06\x86\xeb\xec\x33\x7d\x19\x18\x18\x78\x02\x7c\x42\x5c\x19\x18\x18\x18\x16\x3c\x96\xdc\xed\xff\xff\xff\x7f\xdd\xd7\x19\xfb\x19\x18\x18\x18\x4b\x82\xfc\x82\x19\x1c\x9e\xdd\x48\x03\x71\x92\xbc\xdd\x5d\x98\x05\x79\x7c\x3e\x31\x30\x30\xa8\x7a\xba\x38\x86\x58\x9c\x4e\x4e\x70\x60\x5f\xb4\x30\x41\x60\xd1\x56\x2e\x9e\xb0\x1e\xae\x1e\x15\xc6\x43\x0c\xcb\x58\xdd\xfa\x41\xac\x12\x06\x86\x67\xb1\x19\x59\x17\xda\x76\x76\x82\x8c\xf6\x74\xf5\x73\x59\xe7\x94\xd0\x04\x08\x00\x00\xff\xff\x64\x98\x27\xdc\x90\x00\x00\x00")

func filesMainicon64PngBytes() ([]byte, error) {
	return bindataRead(
		_filesMainicon64Png,
		"files/mainicon64.png",
	)
}

func filesMainicon64Png() (*asset, error) {
	bytes, err := filesMainicon64PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/mainicon64.png", size: 144, mode: os.FileMode(438), modTime: time.Unix(1590859354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/favicon.ico":    filesFaviconIco,
	"files/mainicon64.png": filesMainicon64Png,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"favicon.ico":    &bintree{filesFaviconIco, map[string]*bintree{}},
		"mainicon64.png": &bintree{filesMainicon64Png, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
